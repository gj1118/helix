name: Build and Release

on:
  push:
    branches: [ master ]

jobs:
  build:
    name: Build ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            binary_name: hx
            asset_name: helix-linux-x86_64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            binary_name: hx.exe
            asset_name: helix-windows-x86_64
          - os: macos-13
            target: x86_64-apple-darwin
            binary_name: hx
            asset_name: helix-macos-x86_64
          - os: macos-latest
            target: aarch64-apple-darwin
            binary_name: hx
            asset_name: helix-macos-aarch64

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        target: ${{ matrix.target }}

    - name: Cache Cargo
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-${{ matrix.target }}-cargo-${{ hashFiles('**/Cargo.lock') }}

    - name: Fetch tree-sitter grammars
      run: cargo run --package=helix-loader --bin=hx-loader

    - name: Build binary
      run: cargo build --release --target ${{ matrix.target }} --locked

    - name: Strip binary (Unix)
      if: matrix.os != 'windows-latest'
      run: strip target/${{ matrix.target }}/release/${{ matrix.binary_name }}

    - name: Create archive
      shell: bash
      run: |
        mkdir -p dist
        cp target/${{ matrix.target }}/release/${{ matrix.binary_name }} dist/
        
        # Clean up runtime directory and copy
        rm -rf runtime/grammars/sources
        cp -r runtime dist/
        
        if [ "${{ matrix.os }}" = "windows-latest" ]; then
          cd dist && 7z a ../${{ matrix.asset_name }}.zip *
        else
          tar -czf ${{ matrix.asset_name }}.tar.gz -C dist .
        fi

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.asset_name }}
        path: |
          ${{ matrix.asset_name }}.tar.gz
          ${{ matrix.asset_name }}.zip

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Merge master to master_backup
      run: |
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        if git show-ref --verify --quiet refs/remotes/origin/master_backup; then
          git checkout -B master_backup origin/master_backup
        else
          git checkout --orphan master_backup
          git reset --hard master
        fi
        git merge master --no-edit || true
        git push origin master_backup

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts/

    - name: Create release tag
      id: create_tag
      run: |
        # Create base tag name with yy.mm.dd format
        BASE_DATE=$(date +'%y.%m.%d')
        
        # Check for existing tags with same date to determine increment
        EXISTING_TAGS=$(git tag -l "${BASE_DATE}*" | sort -V)
        
        if [ -z "$EXISTING_TAGS" ]; then
          # No existing tags for today, use base date
          TAG_NAME="$BASE_DATE"
        else
          # Find the highest increment number
          MAX_INCREMENT=0
          while IFS= read -r tag; do
            if [ "$tag" = "$BASE_DATE" ]; then
              # Base tag exists, we need at least .01
              continue
            else
              # Extract increment from tag like 25.09.01.02
              INCREMENT_PART=$(echo "$tag" | sed "s/^${BASE_DATE}\.//")
              if [ "$INCREMENT_PART" != "$tag" ] && echo "$INCREMENT_PART" | grep -q '^[0-9]*$'; then
                # Remove leading zeros for arithmetic
                INCREMENT=$((10#$INCREMENT_PART))
                if [ $INCREMENT -gt $MAX_INCREMENT ]; then
                  MAX_INCREMENT=$INCREMENT
                fi
              fi
            fi
          done <<< "$EXISTING_TAGS"
          
          # Create next increment
          NEXT_INCREMENT=$((MAX_INCREMENT + 1))
          TAG_NAME="${BASE_DATE}.$(printf "%02d" $NEXT_INCREMENT)"
        fi
        
        echo "tag_name=$TAG_NAME" >> $GITHUB_OUTPUT
        echo "release_name=$TAG_NAME" >> $GITHUB_OUTPUT

    - name: Create Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ steps.create_tag.outputs.tag_name }}
        name: ${{ steps.create_tag.outputs.release_name }}
        draft: false
        prerelease: false
        files: artifacts/**/*
        body: |
          Automated build of Helix editor binaries from master branch.
          
          ## Downloads
          
          - **Linux x86_64**: helix-linux-x86_64.tar.gz
          - **Windows x86_64**: helix-windows-x86_64.zip
          - **macOS x86_64**: helix-macos-x86_64.tar.gz
          - **macOS Apple Silicon**: helix-macos-aarch64.tar.gz