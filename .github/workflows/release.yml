name: Build and Release

on:
  push:
    branches: [ master ]

jobs:
  build:
    name: Build ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            binary_name: hx
            asset_name: helix-linux-x86_64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            binary_name: hx.exe
            asset_name: helix-windows-x86_64
          - os: macos-latest
            target: x86_64-apple-darwin
            binary_name: hx
            asset_name: helix-macos-x86_64
          - os: macos-latest
            target: aarch64-apple-darwin
            binary_name: hx
            asset_name: helix-macos-aarch64

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}

    - name: Cache Cargo
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-${{ matrix.target }}-cargo-${{ hashFiles('**/Cargo.lock') }}

    - name: Fetch tree-sitter grammars
      run: cargo run --package=helix-loader --bin=hx-loader

    - name: Build binary
      run: cargo build --release --target ${{ matrix.target }} --locked

    - name: Strip binary (Unix)
      if: matrix.os != 'windows-latest'
      run: strip target/${{ matrix.target }}/release/${{ matrix.binary_name }}

    - name: Create archive
      shell: bash
      run: |
        mkdir -p dist
        cp target/${{ matrix.target }}/release/${{ matrix.binary_name }} dist/
        cp -r runtime dist/
        
        if [ "${{ matrix.os }}" = "windows-latest" ]; then
          cd dist && 7z a ../${{ matrix.asset_name }}.zip *
        else
          tar -czf ${{ matrix.asset_name }}.tar.gz -C dist .
        fi

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.asset_name }}
        path: |
          ${{ matrix.asset_name }}.tar.gz
          ${{ matrix.asset_name }}.zip

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts/

    - name: Create release tag
      id: create_tag
      run: |
        TAG_NAME="build-$(date +'%Y%m%d-%H%M%S')"
        echo "tag_name=$TAG_NAME" >> $GITHUB_OUTPUT
        echo "release_name=Build $TAG_NAME" >> $GITHUB_OUTPUT

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.create_tag.outputs.tag_name }}
        release_name: ${{ steps.create_tag.outputs.release_name }}
        draft: false
        prerelease: false
        body: |
          Automated build of Helix editor binaries from master branch.
          
          ## Downloads
          
          - **Linux x86_64**: helix-linux-x86_64.tar.gz
          - **Windows x86_64**: helix-windows-x86_64.zip
          - **macOS x86_64**: helix-macos-x86_64.tar.gz
          - **macOS Apple Silicon**: helix-macos-aarch64.tar.gz

    - name: Upload Release Assets
      shell: bash
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        upload_url="${{ steps.create_release.outputs.upload_url }}"
        for asset_dir in artifacts/*/; do
          for file in "$asset_dir"*; do
            if [ -f "$file" ]; then
              filename=$(basename "$file")
              echo "Uploading $filename..."
              curl -H "Authorization: token $GITHUB_TOKEN" \
                   -H "Content-Type: application/octet-stream" \
                   --data-binary @"$file" \
                   "${upload_url%{?name,label\}*}?name=$filename"
            fi
          done
        done